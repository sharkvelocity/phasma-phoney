<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Phasma‚ÄëPhoney</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: url('./House.png') no-repeat center center fixed;
      background-size: cover;
      color: white;
      font-family: sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      overflow: hidden;
    }
    #title-img {
      margin-top: 40px;
      max-width: 80%;
      height: auto;
      filter: drop-shadow(0 0 10px cyan);
    }
    button {
      background: #222;
      color: white;
      border: 1px solid #666;
      padding: 10px;
      margin: 5px;
      cursor: pointer;
    }
    .hidden { display: none; }
    #start-btn { font-size: 16px; margin-top: 20px; }
    #game-screen {
      display: flex;
      width: 100vw;
      height: 100vh;
      justify-content: space-between;
      padding: 10px;
    }
    #left-panel, #right-panel {
      display: flex;
      flex-direction: column;
      gap: 10px;
      padding: 10px;
      height: 100%;
    }
    #center-panel {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 10px;
      overflow-y: auto;
    }
    #narrator-box {
      display: flex;
      justify-content: space-between;
      gap: 10px;
      width: 90%;
      background: #111;
      padding: 10px;
      border: 1px solid #444;
    }
    #system-text, #narrator-thought {
      flex: 1;
      background: #222;
      padding: 8px;
      border: 1px solid #333;
      min-height: 60px;
    }
    #main-readout {
      background: #111;
      padding: 10px;
      margin: 5px;
      border: 1px solid #444;
      width: 90%;
      max-height: 300px;
      overflow-y: auto;
      white-space: pre-wrap;
    }
    #hud-status {
      background: #111;
      padding: 10px;
      margin: 5px;
      border: 1px solid #444;
      width: 90%;
    }
    .orb {
      position: absolute;
      width: 8px;
      height: 8px;
      background: rgba(255, 255, 255, 0.4);
      border-radius: 50%;
      box-shadow: 0 0 8px 4px rgba(255, 255, 255, 0.15);
      opacity: 0;
      animation-name: drift, fadeGlow;
      animation-timing-function: ease-in-out;
      animation-iteration-count: 1;
      pointer-events: none;
    }
    @keyframes drift {
      from { transform: translate(0, 0); }
      to { transform: translate(var(--dx), var(--dy)); }
    }
    @keyframes fadeGlow {
      0% { opacity: 0; }
      30% { opacity: 0.5; }
      60% { opacity: 0.8; }
      100% { opacity: 0.2; }
    }
  </style>
</head>

<body>
  <h1><img src="./Title.png" alt="Phasma-Phoney Title" id="title-img"></h1>
  <button id="start-btn">Start Investigation</button>

  <div id="loadout-screen" class="hidden">
    <h2>Select Your Loadout</h2>
    <div id="loadout-options"></div>
    <button id="confirm-loadout">Confirm</button>
    <button id="back-btn">Back</button>
  </div>

  <div id="game-screen" class="hidden">
    <div id="left-panel">
      <button id="journal-btn">Journal</button>
      <div id="option-buttons"></div>
    </div>
    <div id="center-panel">
      <div id="narrator-box">
        <div id="system-text"></div>
        <div id="narrator-thought"></div>
      </div>
      <div id="main-readout">welcome...</div>
      <div id="hud-status"></div>
    </div>
    <div id="right-panel">
      <div id="minimap"></div>
      <h3>Evidence Checklist</h3>
      <div id="evidence-checklist"></div>
      <ul id="possible-ghosts"></ul>
    </div>
  </div>

  <div id="journal-screen" class="hidden">
    <h1>Investigation Journal</h1>
    <textarea id="journal-entry" rows="8" cols="40"></textarea><br/>
    <button id="save-journal">Save</button>
    <button id="close-journal">Close</button>
  </div><script>
let sanity = 100, xp = 0, turn = 1;
let cursedItemsUsed = 0, ghostActivityLevel = 0;
let lastAction = 'idle', ghost = null;
let isVanAccess = false, selectedLoadout = [];
let journalNotes = '', currentRoom = 'Foyer';

const inventory = {};
const alwaysWithYou = ['Lighter'];
const roomItems = {};
const vanInventory = {
  'EMF Reader': 1, 'Spirit Box': 1, 'Ghost Writing Book': 1,
  'Candle': 4, 'Smudge Stick': 4, 'Salt': 3, 'UV Light': 1,
  'Thermometer': 1, 'Camera': 1, 'Parabolic Mic': 1, 'Crucifix': 1,
  'Proximity Sensor': 1
};
const allItems = Object.keys(vanInventory);
const consumables = ['Smudge Stick', 'Candle', 'Salt'];

const roomMap = {
  'Foyer': { North: 'Living Room', East: 'Garage', South: 'Basement' },
  'Living Room': { South: 'Foyer', East: 'Kitchen', West: 'Dining Room' },
  'Kitchen': { West: 'Living Room' },
  'Dining Room': { East: 'Living Room' },
  'Bathroom': { North: 'Bedroom' },
  'Bedroom': { South: 'Bathroom' },
  'Garage': { West: 'Foyer' },
  'Basement': { North: 'Foyer' }
};

function getCurrentRoom() { return currentRoom; }
function movePlayer(dir) {
  const dest = roomMap[currentRoom]?.[dir];
  if (!dest) return `‚ùå Can't go ${dir}.`;
  currentRoom = dest;
  adjustSanity(-2);
  return `üö™ You move ${dir} into the ${dest}.`;
}

function getInventory() {
  return Object.keys(inventory).concat(alwaysWithYou);
}
function addItemToInventory(item) {
  const total = Object.values(inventory).reduce((a, b) => a + b, 0);
  if (total >= 3) return displayNarratorText('‚ùå You can only carry 3 items.');
  inventory[item] = 1;
  updateHUD();
}
function dropItem(item) {
  if (!inventory[item]) return `‚ùå You don‚Äôt have a ${item} to drop.`;
  if (!roomItems[currentRoom]) roomItems[currentRoom] = [];
  roomItems[currentRoom].push(item);
  delete inventory[item];
  updateHUD();
  return `üì¶ You placed the ${item} in the ${currentRoom}.`;
}
function pickUpItem(item) {
  if (!roomItems[currentRoom] || !roomItems[currentRoom].includes(item)) return `‚ùå No ${item} found here.`;
  const total = Object.values(inventory).reduce((a, b) => a + b, 0);
  if (total >= 3) return `‚ùå Your hands are full.`;
  inventory[item] = 1;
  roomItems[currentRoom] = roomItems[currentRoom].filter(i => i !== item);
  updateHUD();
  return `üéí You picked up the ${item}.`;
}
function showRoomItems() {
  const items = roomItems[currentRoom] || [];
  return items.length ? `üóÇÔ∏è Items here: ${items.join(', ')}` : 'üì≠ The room is empty.';
}

function updateHUD() {
  document.getElementById('hud-status').innerText =
    `Turn: ${turn} | Sanity: ${sanity}% | XP: ${xp} | Inventory: ${getInventory().join(', ') || 'none'}`;
}

function adjustSanity(change) {
  sanity = Math.max(0, Math.min(100, sanity + change));
}
function resetStats() {
  sanity = 100;
  xp = 0;
  turn = 1;
  cursedItemsUsed = 0;
  ghostActivityLevel = 0;
  lastAction = 'idle';
}

function tickTurn() {
  turn++;
  updateHUD();
  displayNarratorText(performGhostAction());
  narrateAmbience();
}
function triggerHunt() {
  lastAction = 'hunt';
  ghostActivityLevel = 10;
  adjustSanity(-30);
  displayNarratorText("üíÄ The ghost begins a hunt!");
}

function displayNarratorText(text) {
  const systemBox = document.getElementById('system-text');
  const readout = document.getElementById('main-readout');
  systemBox.innerText = text;
  readout.innerText += `\n${text}`;
  readout.scrollTop = readout.scrollHeight;
}
</script><script>
// Evidence system
const allEvidence = ['EMF 5', 'Spirit Box', 'Fingerprints', 'Ghost Orbs', 'Ghost Writing', 'Freezing Temps', 'D.O.T.S'];
const evidenceToolMap = {
  'EMF Reader': 'EMF 5',
  'Spirit Box': 'Spirit Box',
  'UV Light': 'Fingerprints',
  'Thermometer': 'Freezing Temps',
  'Camera': 'Ghost Orbs',
  'Ghost Writing Book': 'Ghost Writing',
  'Parabolic Mic': 'Whispers',
  'Salt': 'Footprints'
};

const ghostEvidenceMap = {
  Spirit: ['EMF 5', 'Spirit Box', 'Ghost Writing'],
  Wraith: ['EMF 5', 'Spirit Box', 'D.O.T.S'],
  Phantom: ['Spirit Box', 'Fingerprints', 'D.O.T.S'],
  Poltergeist: ['Spirit Box', 'Fingerprints', 'Ghost Writing'],
  Banshee: ['Fingerprints', 'Ghost Orbs', 'D.O.T.S'],
  Jinn: ['EMF 5', 'Fingerprints', 'Freezing Temps'],
  Mare: ['Spirit Box', 'Ghost Orbs', 'Ghost Writing'],
  Revenant: ['Ghost Orbs', 'Ghost Writing', 'Freezing Temps'],
  Shade: ['EMF 5', 'Ghost Writing', 'Freezing Temps'],
  Demon: ['Fingerprints', 'Ghost Writing', 'Freezing Temps'],
  Yurei: ['Ghost Orbs', 'Freezing Temps', 'D.O.T.S'],
  Oni: ['EMF 5', 'Freezing Temps', 'D.O.T.S'],
  Hantu: ['Fingerprints', 'Ghost Orbs', 'Freezing Temps'],
  Goryo: ['EMF 5', 'Fingerprints', 'D.O.T.S'],
  Myling: ['EMF 5', 'Fingerprints', 'Ghost Writing'],
  Onryo: ['Spirit Box', 'Ghost Orbs', 'Freezing Temps'],
  'The Twins': ['EMF 5', 'Spirit Box', 'Freezing Temps'],
  Raiju: ['EMF 5', 'Ghost Orbs', 'D.O.T.S'],
  Obake: ['EMF 5', 'Fingerprints', 'Ghost Orbs'],
  'The Mimic': ['Spirit Box', 'Fingerprints', 'Freezing Temps'],
  Moroi: ['Spirit Box', 'Ghost Writing', 'Freezing Temps'],
  Deogen: ['Spirit Box', 'Ghost Writing', 'D.O.T.S'],
  Thaye: ['Ghost Orbs', 'Ghost Writing', 'D.O.T.S'],
  Succubus: ['Spirit Box', 'Ghost Writing', 'EMF 5']
};

function renderEvidenceChecklist() {
  const container = document.getElementById('evidence-checklist');
  container.innerHTML = '';
  allEvidence.forEach(ev => {
    const label = document.createElement('label');
    label.style.display = 'block';
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.value = ev;
    checkbox.onchange = updatePossibleGhosts;
    label.appendChild(checkbox);
    label.appendChild(document.createTextNode(' ' + ev));
    container.appendChild(label);
  });
}

function updatePossibleGhosts() {
  const selected = Array.from(document.querySelectorAll('#evidence-checklist input:checked')).map(cb => cb.value);
  const list = document.getElementById('possible-ghosts');
  list.innerHTML = '';
  if (selected.length === 0) {
    list.innerHTML = '<li>All ghosts are possible</li>';
    return;
  }
  const matches = Object.entries(ghostEvidenceMap).filter(([ghost, evidence]) =>
    selected.every(sel => evidence.includes(sel))
  ).map(([ghost]) => ghost);
  list.innerHTML = matches.length
    ? matches.map(g => `<li>${g}</li>`).join('')
    : '<li>No ghosts match this combination</li>';
}

// Ghost system
function getRandomGhost() {
  const types = Object.keys(ghostEvidenceMap);
  const type = types[Math.floor(Math.random() * types.length)];
  return {
    type,
    behavior: room => {
      const base = [
        `You feel watched in the ${room}.`,
        `A chill runs through the ${room}.`,
        `The lights flicker briefly in the ${room}.`
      ];
      const extra = {
        Poltergeist: [`Objects clatter in the ${room}.`],
        Banshee: [`A shriek echoes in the ${room}.`],
        Succubus: [`A sultry whisper brushes your ear in the ${room}.`]
      };
      return [...base, ...(extra[type] || [])][Math.floor(Math.random() * 3)];
    }
  };
}
function initializeGhost(g) { ghost = g; }
function getCurrentGhost() { return ghost; }
function performBehavior(room) { return ghost?.behavior(room) || "Nothing happens."; }
function performGhostAction() {
  if (Math.random() < 0.3) {
    ghostActivityLevel++;
    return "üîä You hear something shifting...";
  }
  return "Nothing yet. Stay vigilant.";
}

// Game options
function renderOptions() {
  const container = document.getElementById('option-buttons');
  container.innerHTML = '';
  const btn = (label, handler) => {
    const b = document.createElement('button');
    b.innerText = label;
    b.onclick = handler;
    container.appendChild(b);
  };
  btn('Move', () => {
    container.innerHTML = '';
    ['North', 'East', 'South', 'West'].forEach(dir => {
      const d = document.createElement('button');
      d.innerText = `Go ${dir}`;
      d.onclick = () => {
        displayNarratorText(movePlayer(dir));
        tickTurn();
        renderOptions();
      };
      container.appendChild(d);
    });
    const back = document.createElement('button');
    back.innerText = 'Back';
    back.onclick = renderOptions;
    container.appendChild(back);
  });
  btn('Investigate', () => {
    displayNarratorText(performBehavior(getCurrentRoom()));
    adjustSanity(-5);
    tickTurn();
  });
  btn('Use Item', () => {
    const items = getInventory();
    container.innerHTML = '';
    if (!items.length) {
      displayNarratorText("üß≥ You have no items.");
      renderOptions();
      return;
    }
    items.forEach(item => {
      const i = document.createElement('button');
      i.innerText = `Use ${item}`;
      i.onclick = () => {
        displayNarratorText(useItem(item, getCurrentRoom(), getCurrentGhost().type));
        tickTurn();
        renderOptions();
      };
      container.appendChild(i);
    });
    const back = document.createElement('button');
    back.innerText = 'Back';
    back.onclick = renderOptions;
    container.appendChild(back);
  });
  btn('Drop Item', () => {
    const items = getInventory().filter(i => !alwaysWithYou.includes(i));
    container.innerHTML = '';
    if (!items.length) {
      displayNarratorText("üì¶ Nothing to drop.");
      renderOptions();
      return;
    }
    items.forEach(item => {
      const b = document.createElement('button');
      b.innerText = `Drop ${item}`;
      b.onclick = () => {
        displayNarratorText(dropItem(item));
        renderOptions();
      };
      container.appendChild(b);
    });
  });
  btn('Pick Up Item', () => {
    const items = roomItems[getCurrentRoom()] || [];
    container.innerHTML = '';
    if (!items.length) {
      displayNarratorText("üì≠ Nothing to pick up.");
      renderOptions();
      return;
    }
    items.forEach(item => {
      const b = document.createElement('button');
      b.innerText = `Pick Up ${item}`;
      b.onclick = () => {
        displayNarratorText(pickUpItem(item));
        renderOptions();
      };
      container.appendChild(b);
    });
  });
  btn('Guess Ghost', () => {
    container.innerHTML = '';
    Object.keys(ghostEvidenceMap).forEach(g => {
      const b = document.createElement('button');
      b.innerText = g;
      b.onclick = () => {
        const correct = g === getCurrentGhost().type;
        if (correct) {
          xp += 50;
          displayNarratorText(`‚úÖ Correct! The ghost was a ${g}. XP gained.`);
        } else {
          displayNarratorText(`‚ùå Incorrect. It was a ${getCurrentGhost().type}.`);
        }
        container.innerHTML = '';
      };
      container.appendChild(b);
    });
    const back = document.createElement('button');
    back.innerText = 'Back';
    back.onclick = renderOptions;
    container.appendChild(back);
  });
  btn('Return to Van', () => {
    isVanAccess = true;
    showLoadoutMenu();
    document.getElementById('loadout-screen').classList.remove('hidden');
  });
}

// Game start
function startGame() {
  resetStats();
  ghost = getRandomGhost();
  initializeGhost(ghost);
  initializeJournal();
  updateHUD();
  displayNarratorText("So it begins...");
  document.getElementById('game-screen').classList.remove('hidden'); // ‚úÖ FIX
  renderOptions();
}

// DOM Content Loaded
document.addEventListener('DOMContentLoaded', () => {
  const startBtn = document.getElementById('start-btn');
  const gameScreen = document.getElementById('game-screen');
  const loadoutScreen = document.getElementById('loadout-screen');
  const confirmBtn = document.getElementById('confirm-loadout');
  const backBtn = document.getElementById('back-btn');
  const journalBtn = document.getElementById('journal-btn');
  const saveJournalBtn = document.getElementById('save-journal');
  const closeJournalBtn = document.getElementById('close-journal');
  const journalScreen = document.getElementById('journal-screen');

  startBtn.onclick = () => {
    const wantsLoadout = confirm("Do you want to select a loadout?");
    if (wantsLoadout) {
      showLoadoutMenu();
      loadoutScreen.classList.remove('hidden');
      startBtn.style.display = 'none';
    } else {
      startGame();
      startBtn.style.display = 'none';
    }
  };

  confirmBtn.onclick = () => {
    loadoutScreen.classList.add('hidden');
    if (isVanAccess) {
      isVanAccess = false;
      renderOptions();
      return;
    }
    selectedLoadout.forEach(item => inventory[item] = 1);
    startGame();
  };

  backBtn.onclick = () => {
    loadoutScreen.classList.add('hidden');
    if (isVanAccess) {
      isVanAccess = false;
      renderOptions();
    } else {
      startBtn.style.display = 'inline-block';
    }
  };

  journalBtn.onclick = () => {
    initializeJournal();
    journalScreen.classList.remove('hidden');
  };

  saveJournalBtn.onclick = () => {
    const text = document.getElementById('journal-entry').value;
    journalNotes = text;
    journalScreen.classList.add('hidden');
    displayNarratorText("üìì Notes saved.");
  };

  closeJournalBtn.onclick = () => {
    journalScreen.classList.add('hidden');
  };
});
</script>
</body>
</html>
